// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?

  image    String?
  accounts Account[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

// 
// User create profile
//  Profile  creates server 
//  Server has member and channel

model Profile {
  id       String  @id @default(uuid())
  userId   String
  name     String
  email    String?
  imageUrl String?

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id       String  @id @default(uuid())
  name     String
  token    String  @unique
  imageUrl String?

  members   Member[]
  channels  Channel[]
  profile   Profile?  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  GUEST
  MODERATOR
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  post Post[]

  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?
  channel   Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String?
  server    Server?  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id          String      @id @default(uuid())
  name        String
  channelType ChannelType @default(TEXT)

  members Member[]
  posts   Post[]

  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?
  server    Server?  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id String @id @default(uuid())

  content String?
  fileUrl String?
  deleted Boolean? @default(false)

  member    Member?  @relation(fields: [memberId], references: [id])
  memberId  String?
  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
