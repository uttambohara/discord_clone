datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationCode {
  id      String   @id @default(cuid())
  token   String
  email   String
  expires DateTime
}

//

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String?
  email     String?
  imageUrl  String?
  servers   Server[]
  members   Member[]
  channels  Channel[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Server {
  id         String  @id @default(uuid())
  name       String
  imageUrl   String
  inviteCode String?

  members  Member[]
  channels Channel[]

  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  GUEST
  MODERATOR
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?
  server    Server?  @relation(fields: [serverId], references: [id])
  serverId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id      String      @id @default(uuid())
  name    String
  type    ChannelType @default(AUDIO)
  members Member[]

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
  server    Server?  @relation(fields: [serverId], references: [id])
  serverId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
