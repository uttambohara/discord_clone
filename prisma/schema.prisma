generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum MemberType {
  ADMIN
  GUEST
  MODERATOR
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Profile {
  id       String @id @default(uuid())
  userId   String
  name     String
  email    String
  imageUrl String

  // relation
  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @default(uuid())

  name       String
  imageUrl   String
  inviteCode String

  // relation
  members   Member[]
  channels  Channel[]
  profile   Profile?  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([profileId])
}

model Member {
  id String @id @default(uuid())

  role MemberType @default(GUEST)

  // relation
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?
  server    Server?  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Channel {
  id String @id @default(uuid())

  name String
  type ChannelType @default(TEXT)

  // relation
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?
  server    Server?  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}
